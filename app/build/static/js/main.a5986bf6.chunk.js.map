{"version":3,"sources":["Contracts/ERC20/Types.ts","Adapter/index.tsx","Config/index.ts","Assets/doodle.png","View/Components/Styles.ts","Template/Body.tsx","View/Styles.ts","Components/BridgeForm/Styles.ts","Components/BridgeForm/TransactionDetails.tsx","Components/TransferOverviewModal/index.tsx","Components/BridgeForm/index.tsx","Components/BridgeForm/useSwap.ts","View/Components/Swap.tsx","Services/OfflineConnectors.ts","Contracts/ERC20/balanceOf.ts","Liquidity/index.ts","View/Components/Liquidity.tsx","View/index.tsx","Services/API.ts","Config/Component.tsx","Services/Clocks.ts","Liquidity/Component.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ERC20ContractMethods","AdapterContext","React","createContext","connection","undefined","eventBus","balances","useAdapter","state","useContext","addToken","useCallback","currency","emit","AddCurrency","adapter","ConfigState","atom","key","default","useConfig","useRecoilState","config","setConfig","blockchainConfig","useMemo","blockchain","BridgePanel","styled","div","Hero","doodle","LiquidityCardContent","BodyWrapper","Body","children","style","maxWidth","width","BridgeWrapper","SwitchWrapper","From","To","BridgeDirection","p","theme","txt200","TransactionDetailsWrapper","TransferOverviewButton","PrimaryButton","DestinationAddressWrapper","props","primary","DestinationLabel","BlockchainFlow","ul","Line","li","Title","Value","TransactionDetails","toLocaleString","Swap","SwapPart","bgAlt2","borderRadius","Send","Receive","Address","Confirm","TransferOverviewModalWrapper","Modal","Desc","TransferOverviewModal","close","useState","confirmed","setConfirmed","onClick","shortAddress","token","Currency","amount","checked","onChange","label","href","disabled","block","size","BridgeForm","setAmount","token0","setToken0","isConnected","getAddress","destinationAddress","setDestinationAddress","useEffect","token1","useSwap","overviewTransactionProps","useModal","component","options","disableBackdropClick","overviewTransaction","tokenList","Object","values","tokens","map","length","token0Balance","tokenBalances","find","b","equals","toFactorized","balance","variant","balanceLabel","onAmountChange","onTokenChange","Blockchains","Ethereum","disableTokenChange","disableMaxAction","disableAmountChange","value","e","currentTarget","prefixAddon","offlineConnectors","reduce","obj","connector","getBlockchainOfflineConnector","random","connect","BalanceOf","params","tokenAddress","this","owner","ContractUseCase","LiquidityState","t","curr","useLiquidity","liquidity","setLiquidity","updateLiquidity","a","newState","cfg","balanceOfCalls","bridgeContract","address","Promise","all","initializeToken","multicall","execute","results","r","idx","keys","Liquidity","LiquidityCard","blockchainLiquidity","VernacularBlockchains","className","liq","src","alt","BN","toNumber","symbol","Bridge","section","setSection","Section","useTranslation","i18n","choices","selected","BASE_ENDPOINT","fetch","then","res","json","response","result","forEach","currToken","decimals","name","Config","init","setInit","initializeTokens","setTimeout","RefreshBalances","fetchConfig","Clock","clockTenSeconds","clockThirtySeconds","clockSixtySeconds","clockTwoMinutes","console","debug","setInterval","clearInterval","EventEmitter","Liquidty","fn","Clocks","on","off","App","Binance","start","Provider","I18nextProvider","Themes","Dark","tokenLogoResolver","TokenLogoResolvers","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","Wrapped","document","getElementById"],"mappings":"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","file":"static/js/main.a5986bf6.chunk.js","sourcesContent":["export enum ERC20ContractMethods {\n  BalanceOf = \"balanceOf\",\n}\n\nexport type TERC20Params<T = any> = {\n  contractAddress: string;\n  params: T;\n};\n","import React, { useCallback, useContext } from 'react'\nimport { AddCurrency, ShellWrappedProps } from '@unifiprotocol/shell'\nimport { Currency } from '@unifiprotocol/utils'\n\ntype TAdapter = {\n  connection: ShellWrappedProps['connection'] | undefined\n  eventBus: ShellWrappedProps['eventBus'] | undefined\n  balances: ShellWrappedProps['balances']\n}\n\nexport const AdapterContext = React.createContext<TAdapter>({\n  connection: undefined,\n  eventBus: undefined,\n  balances: []\n})\n\nexport const useAdapter = () => {\n  const state = useContext(AdapterContext)\n\n  const addToken = useCallback(\n    (currency: Currency) => {\n      const { eventBus } = state\n      if (eventBus) {\n        eventBus.emit(new AddCurrency(currency))\n      }\n    },\n    [state]\n  )\n\n  return {\n    addToken,\n    connection: state.connection,\n    adapter: state.connection?.adapter?.adapter,\n    balances: state.balances,\n    eventBus: state.eventBus\n  }\n}\n","import { Blockchains, Currency } from '@unifiprotocol/utils'\nimport { useMemo } from 'react'\nimport { atom, useRecoilState } from 'recoil'\nimport { useAdapter } from '../Adapter'\n\nexport type TConfig = {\n  [B in Blockchains]?: {\n    bridgeContract: string\n    tokens: {\n      [T: string]: Currency\n    }\n  }\n}\n\nconst ConfigState = atom<TConfig>({\n  key: 'configState',\n  default: {}\n})\n\nexport const useConfig = () => {\n  const [config, setConfig] = useRecoilState(ConfigState)\n  const { connection } = useAdapter()\n\n  const blockchainConfig = useMemo(() => {\n    return connection && config[connection.config.blockchain]\n      ? config[connection.config.blockchain]\n      : undefined\n  }, [config, connection])\n\n  return {\n    config,\n    blockchainConfig,\n    setConfig\n  }\n}\n","export default __webpack_public_path__ + \"static/media/doodle.d0c47ef6.png\";","import styled from 'styled-components'\nimport doodle from '../../Assets/doodle.png'\n\nexport const BridgePanel = styled.div`\n  padding-top: 2rem;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`\n\nexport const Hero = styled.div`\n  width: 100%;\n\n  background: url(${doodle}) #191a21;\n  background-repeat: no-repeat;\n  background-size: 60%;\n  background-position: -8rem;\n\n  padding: 0.75rem 1.5rem;\n  border-radius: 1rem;\n  text-align: justify;\n\n  @media (max-width: 576px) {\n    padding: 0;\n    max-width: 100%;\n    background: none;\n  }\n\n  h1 {\n    margin: 0.5rem 0;\n  }\n`\n\nexport const LiquidityCardContent = styled.div`\n  padding: 0.75rem;\n\n  h1 {\n    margin: 0;\n    font-size: 1rem;\n  }\n\n  .title {\n    text-transform: uppercase;\n    font-size: 0.8rem;\n    margin: 0.1rem 0;\n    margin-top: 0.5rem;\n    opacity: 0.8;\n    color: rgb(0, 230, 118);\n  }\n\n  .asset {\n    display: flex;\n    align-items: center;\n    padding: 0.2rem 0;\n\n    img {\n      height: 24px;\n      width: auto;\n    }\n\n    > * {\n      padding-right: 0.25rem;\n    }\n  }\n`\n","import { ShinyHeader } from '@unifiprotocol/uikit'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { useAdapter } from '../Adapter'\nimport { useConfig } from '../Config'\nimport { Hero } from '../View/Components/Styles'\n\nconst BodyWrapper = styled.div`\n  margin-top: 1rem;\n  width: 100vw;\n  display: flex;\n  justify-content: center;\n`\n\nexport const Body: React.FC = ({ children }) => {\n  const { connection } = useAdapter()\n  const { config } = useConfig()\n\n  if (connection && config[connection.config.blockchain]) {\n    return <BodyWrapper>{children}</BodyWrapper>\n  }\n\n  return (\n    <BodyWrapper>\n      <div style={{ maxWidth: '992px', width: '100%' }}>\n        <Hero>\n          <ShinyHeader>Blockchain not supported</ShinyHeader>\n          <p>Working in progress to give you the availability of UNFI crosschain.</p>\n          <p>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n            incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n            exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure\n            dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n            Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt\n            mollit anim id est laborum.\n          </p>\n        </Hero>\n      </div>\n    </BodyWrapper>\n  )\n}\n","import styled from 'styled-components'\n\nexport const BridgeWrapper = styled.div`\n  max-width: 992px;\n  width: 100%;\n  margin-bottom: 2rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const SwitchWrapper = styled.div`\n  padding: 1rem;\n`\n","import { PrimaryButton } from '@unifiprotocol/uikit'\nimport styled from 'styled-components'\n\nexport const InputHead = styled.div``\nexport const From = styled.div``\nexport const To = styled.div``\nexport const Account = styled.div`\n  display: flex;\n  align-items: center;\n`\nexport const BridgeDirection = styled.div`\n  padding: 0.75rem;\n  line-height: 0;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 90%;\n  color: ${(p) => p.theme.txt200};\n\n  svg {\n    vertical-align: middle;\n    margin-right: 0.3rem;\n  }\n`\n\nexport const TransactionDetailsWrapper = styled.div`\n  padding: 1rem 0.3rem;\n`\n\nexport const TransferOverviewButton = styled(PrimaryButton)`\n  font-weight: bold;\n  font-size: 110%;\n`\n\nexport const DestinationAddressWrapper = styled.div`\n  cursor: pointer;\n  margin-top: 0.5rem;\n\n  :focus-within,\n  :hover {\n    color: ${(props) => props.theme.primary};\n  }\n\n  input {\n    font-size: 0.95rem;\n  }\n`\n\nexport const DestinationLabel = styled.div`\n  text-align: center;\n  font-size: 0.85rem;\n`\n\nexport const BlockchainFlow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 0.3rem;\n  margin-bottom: 0.5rem;\n`\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst TransactionDetailsWrapper = styled.ul`\n  padding: 0;\n  margin: 0;\n`\n\nconst Line = styled.li`\n  padding: 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n\nconst Title = styled.div`\n  color: ${(p) => p.theme.txt200};\n`\n\nconst Value = styled.div``\n\nexport const TransactionDetails: React.FC = () => {\n  return (\n    <TransactionDetailsWrapper>\n      <Line>\n        <Title>Max swap size</Title>\n        <Value>{(14_000).toLocaleString()} UNFI</Value>\n      </Line>\n      <Line>\n        <Title>Swap fee</Title>\n        <Value>0% ~ 0 UNFI</Value>\n      </Line>\n      <Line>\n        <Title>Transaction cost</Title>\n        <Value>~0.00001123 BNB</Value>\n      </Line>\n      <Line>\n        <Title>Estimated time</Title>\n        <Value>~2min</Value>\n      </Line>\n    </TransactionDetailsWrapper>\n  )\n}\n","import {\n  Checkbox,\n  Modal,\n  ModalBody,\n  ModalClose,\n  ModalHeader,\n  ModalProps,\n  ModalTitle,\n  PrimaryButton,\n  TokenAmount\n} from '@unifiprotocol/uikit'\nimport { Currency, shortAddress } from '@unifiprotocol/utils'\nimport React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { TransactionDetails } from '../BridgeForm/TransactionDetails'\n\nconst Swap = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  margin-bottom: 1rem;\n`\n\nconst SwapPart = styled.div`\n  width: 50%;\n  b {\n    color: ${(p) => p.theme.primary};\n  }\n  span {\n    display: block;\n\n    margin-bottom: 0.5rem;\n  }\n  padding: 0.5rem;\n  border: 3px solid ${(p) => p.theme.bgAlt2};\n  border-radius: ${(p) => p.theme.borderRadius};\n`\n\nconst Send = styled(SwapPart)``\nconst Receive = styled(SwapPart)``\nconst Address = styled.div`\n  margin-bottom: 0.5rem;\n`\nconst Confirm = styled.div`\n  margin: 2rem 0 1rem 0;\n`\n\nconst TransferOverviewModalWrapper = styled(Modal)`\n  max-width: 28rem;\n`\nconst Desc = styled.div`\n  margin-bottom: 2rem;\n`\n\nexport interface TransferOverviewModalProps extends ModalProps {}\n\nexport const TransferOverviewModal: React.FC<TransferOverviewModalProps> = ({ close }) => {\n  const [confirmed, setConfirmed] = useState(false)\n  return (\n    <TransferOverviewModalWrapper>\n      <ModalHeader>\n        <ModalTitle>Transfer overview</ModalTitle>\n        <ModalClose onClick={close} />\n      </ModalHeader>\n      <ModalBody>\n        <Desc>You are about to confirm the crosschain transaction below: </Desc>\n        <Swap>\n          <Send>\n            <span>\n              From <b>Binance</b>\n            </span>\n            <Address>{shortAddress('0x52856Ca4ddb55A1420950857C7882cFC8E02281C')}</Address>\n            <TokenAmount token={new Currency('UNFI', 18, 'UNFI', 'UNFI')} amount={'100'} />\n          </Send>\n\n          <Receive>\n            <span>\n              To <b>Ethereum</b>\n            </span>\n\n            <Address>{shortAddress('0x49506Ca4ddb55A1420950857C7882cFC8E02123A')}</Address>\n            <TokenAmount token={new Currency('UNFI', 18, 'UNFI', 'UNFI')} amount={'99'} />\n          </Receive>\n        </Swap>\n        <TransactionDetails />\n        <Confirm>\n          <Checkbox\n            checked={confirmed}\n            onChange={setConfirmed}\n            label={\n              <>\n                I read and accept the <a href=\"#xd\">terms and conditions</a>\n              </>\n            }\n          />\n        </Confirm>\n        <PrimaryButton disabled={!confirmed} block={true} size=\"xl\">\n          Perform swap\n        </PrimaryButton>\n      </ModalBody>\n    </TransferOverviewModalWrapper>\n  )\n}\n","import {\n  Card,\n  CardBody,\n  Input,\n  PrimaryButton,\n  TokenInput,\n  TokenInputWithSelector,\n  useModal\n} from '@unifiprotocol/uikit'\nimport React, { useEffect, useMemo } from 'react'\nimport {\n  BlockchainFlow,\n  BridgeDirection,\n  DestinationAddressWrapper,\n  DestinationLabel,\n  From,\n  To,\n  TransactionDetailsWrapper,\n  TransferOverviewButton\n} from './Styles'\nimport { CgArrowsExchangeV } from 'react-icons/cg'\nimport { TransactionDetails } from './TransactionDetails'\nimport { TransferOverviewModal, TransferOverviewModalProps } from '../TransferOverviewModal'\nimport { Blockchains } from '@unifiprotocol/utils'\nimport { useAdapter } from '../../Adapter'\nimport { useSwap } from './useSwap'\nimport { useConfig } from '../../Config'\n\nexport const BridgeForm: React.FC = () => {\n  const { blockchainConfig } = useConfig()\n  const { adapter, balances, connection } = useAdapter()\n  const {\n    amount,\n    token0,\n    token1,\n    destinationAddress,\n    setDestinationAddress,\n    setAmount,\n    setToken0\n  } = useSwap()\n\n  const overviewTransactionProps = useMemo(() => ({}), [])\n  const [overviewTransaction] = useModal<TransferOverviewModalProps>({\n    component: TransferOverviewModal,\n    props: overviewTransactionProps,\n    options: { disableBackdropClick: true }\n  })\n\n  const tokenList = useMemo(() => {\n    return blockchainConfig\n      ? Object.values(blockchainConfig.tokens).map((currency) => ({ currency }))\n      : []\n  }, [blockchainConfig])\n\n  useEffect(() => {\n    if (!token0 && tokenList.length > 0) {\n      setToken0(tokenList[0].currency)\n    }\n  }, [setToken0, token0, tokenList, tokenList.length])\n\n  const token0Balance = useMemo(() => {\n    if (!token0) return '0'\n    const tokenBalances = balances.find((b) => b.currency.equals(token0))\n    return token0.toFactorized(tokenBalances?.balance ?? '0')\n  }, [token0, balances])\n\n  return (\n    <>\n      <Card>\n        <CardBody>\n          <From>\n            <BlockchainFlow>\n              <span>From</span>\n              <PrimaryButton variant=\"outline\">{connection?.config.blockchain}</PrimaryButton>\n            </BlockchainFlow>\n            <TokenInputWithSelector\n              label=\"Send\"\n              balanceLabel=\"Balance\"\n              amount={amount}\n              token={token0}\n              balance={token0Balance}\n              onAmountChange={setAmount}\n              onTokenChange={setToken0}\n              tokenList={tokenList}\n            />\n          </From>\n          <BridgeDirection>\n            <CgArrowsExchangeV size={30} /> <span>You will receive</span>\n          </BridgeDirection>\n          <To>\n            <BlockchainFlow>\n              <span>To</span>\n              <PrimaryButton variant=\"outline\">{Blockchains.Ethereum}</PrimaryButton>\n            </BlockchainFlow>\n            <TokenInput\n              label=\"Receive\"\n              balanceLabel=\"Balance\"\n              amount={amount}\n              token={token1}\n              disableTokenChange={true}\n              disableMaxAction={true}\n              disableAmountChange={true}\n              onAmountChange={() => {}}\n            />\n\n            {adapter && (\n              <DestinationAddressWrapper>\n                <Input\n                  value={destinationAddress}\n                  onChange={(e) => setDestinationAddress(e.currentTarget.value)}\n                  prefixAddon={<DestinationLabel>Destination Address</DestinationLabel>}\n                />\n              </DestinationAddressWrapper>\n            )}\n          </To>\n          <TransactionDetailsWrapper>\n            <TransactionDetails />\n          </TransactionDetailsWrapper>\n          <TransferOverviewButton block={true} size=\"xl\" onClick={overviewTransaction}>\n            <CgArrowsExchangeV size={30} /> Transfer overview\n          </TransferOverviewButton>\n        </CardBody>\n      </Card>\n    </>\n  )\n}\n","import { useEffect, useState } from 'react'\nimport { Currency } from '@unifiprotocol/utils'\nimport { useAdapter } from '../../Adapter'\n\nexport const useSwap = () => {\n  const { adapter } = useAdapter()\n\n  const [amount, setAmount] = useState('0')\n  const [token0, setToken0] = useState<Currency | undefined>(undefined)\n  const [destinationAddress, setDestinationAddress] = useState(\n    adapter?.isConnected() ? adapter.getAddress() : ''\n  )\n\n  useEffect(() => {\n    if (destinationAddress === '' && adapter?.isConnected()) {\n      setDestinationAddress(adapter.getAddress())\n    }\n  }, [adapter, destinationAddress])\n\n  return {\n    amount,\n    token0,\n    token1: token0,\n    destinationAddress,\n    setDestinationAddress,\n    setAmount,\n    setToken0\n  }\n}\n","import React from 'react'\nimport { ShinyHeader } from '@unifiprotocol/uikit'\nimport { BridgeForm } from '../../Components/BridgeForm'\nimport { Hero, BridgePanel } from './Styles'\n\nexport const Swap = () => {\n  return (\n    <>\n      <Hero>\n        <ShinyHeader>Bridge</ShinyHeader>\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\n          ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation\n          ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur\n          sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id\n          est laborum.\n        </p>\n      </Hero>\n      <BridgePanel>\n        <BridgeForm />\n      </BridgePanel>\n    </>\n  )\n}\n","import { getBlockchainOfflineConnector, IConnector, Blockchains } from '@unifiprotocol/core-sdk'\n\nexport const offlineConnectors = (() => {\n  return Object.values(Blockchains).reduce(\n    (obj: { [B in Blockchains]?: IConnector }, b: string) => {\n      const blockchain = b as Blockchains\n      const connector = getBlockchainOfflineConnector(blockchain, { random: true })\n      connector.connect()\n      obj[blockchain] = connector\n      return obj\n    },\n    {}\n  )\n})() as { [B in Blockchains]: IConnector }\n","import { ContractUseCase } from \"@unifiprotocol/core-sdk\";\nimport { ERC20ContractMethods } from \"./Types\";\n\nexport interface BalanceOfParams {\n  owner: string;\n  tokenAddress: string;\n}\n\nexport class BalanceOf extends ContractUseCase<\n  ERC20ContractMethods,\n  BalanceOfParams,\n  string\n> {\n  constructor(params: BalanceOfParams) {\n    super(params.tokenAddress, ERC20ContractMethods.BalanceOf, params, false);\n  }\n\n  getArgs() {\n    return [this.params.owner];\n  }\n}\n","import { useCallback } from 'react'\nimport { Blockchains } from '@unifiprotocol/core-sdk'\nimport { Currency } from '@unifiprotocol/utils'\nimport { atom, useRecoilState } from 'recoil'\nimport { useConfig } from '../Config'\nimport { offlineConnectors } from '../Services/OfflineConnectors'\nimport { BalanceOf } from '../Contracts/ERC20/balanceOf'\n\nexport type TLiquidity = {\n  [B in Blockchains]: Array<{\n    currency: Currency\n    balance: string\n  }>\n}\n\nconst LiquidityState = atom<TLiquidity>({\n  key: 'liquidityState',\n  default: Object.values(Blockchains).reduce((t: TLiquidity, curr) => {\n    const blockchains = curr as Blockchains\n    t[blockchains] = []\n    return t\n  }, {} as TLiquidity)\n})\n\nexport const useLiquidity = () => {\n  const [liquidity, setLiquidity] = useRecoilState(LiquidityState)\n  const { config } = useConfig()\n\n  const updateLiquidity = useCallback(async () => {\n    const newState = { ...liquidity }\n    for (const b of Object.keys(config)) {\n      const blockchain = b as Blockchains\n      const cfg = config[blockchain]\n      if (!cfg) break\n      const tokens = Object.values(cfg.tokens)\n      const { adapter } = offlineConnectors[blockchain]\n      if (!adapter) break\n      const balanceOfCalls = tokens.map(\n        (t) => new BalanceOf({ owner: cfg.bridgeContract, tokenAddress: t.address })\n      )\n      await Promise.all(tokens.map((t) => adapter.adapter.initializeToken(t.address)))\n      const results = await adapter.multicall.execute(balanceOfCalls)\n      newState[blockchain] = results.map((r, idx) => ({\n        currency: tokens[idx],\n        balance: r.value ?? '0'\n      }))\n    }\n    setLiquidity(newState)\n  }, [config, liquidity, setLiquidity])\n\n  return {\n    liquidity,\n    updateLiquidity\n  }\n}\n","import React, { useMemo } from 'react'\nimport { CollapsibleCard, ShinyHeader } from '@unifiprotocol/uikit'\nimport { BridgePanel, Hero, LiquidityCardContent } from './Styles'\nimport { BN, VernacularBlockchains } from '@unifiprotocol/utils'\nimport { Blockchains } from '@unifiprotocol/core-sdk'\nimport { useConfig } from '../../Config'\nimport { useLiquidity } from '../../Liquidity'\n\nexport const Liquidity = () => {\n  const { config } = useConfig()\n\n  return (\n    <>\n      <Hero>\n        <ShinyHeader>Liquidity</ShinyHeader>\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\n          ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation\n          ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur\n          sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id\n          est laborum.\n        </p>\n      </Hero>\n      <BridgePanel>\n        {Object.keys(config).map((b, idx) => {\n          const blockchain = b as Blockchains\n          return <LiquidityCard {...{ blockchain }} key={idx} />\n        })}\n      </BridgePanel>\n    </>\n  )\n}\n\nexport const LiquidityCard: React.FC<{ blockchain: Blockchains }> = ({ blockchain }) => {\n  const { liquidity } = useLiquidity()\n\n  const blockchainLiquidity = useMemo(() => {\n    return liquidity[blockchain]\n  }, [blockchain, liquidity])\n\n  return (\n    <CollapsibleCard>\n      <LiquidityCardContent>\n        <h1>{VernacularBlockchains[blockchain]}</h1>\n        <div className=\"title\">TVL</div>\n        <div>${(5_000_000).toLocaleString()}</div>\n        <div className=\"title\">Assets</div>\n        {blockchainLiquidity.map((liq, idx) => (\n          <div className=\"asset\" key={idx}>\n            <img src=\"https://assets.unifiprotocol.com/UNFI.png\" alt=\"UNFI\" />\n            <span>{BN(liq.balance).toNumber().toLocaleString()}</span>\n            <span>{liq.currency.symbol}</span>\n          </div>\n        ))}\n      </LiquidityCardContent>\n    </CollapsibleCard>\n  )\n}\n","import React, { useMemo, useState } from 'react'\nimport { BridgeWrapper, SwitchWrapper } from './Styles'\nimport { useTranslation } from 'react-i18next'\nimport { Switch } from '@unifiprotocol/uikit'\nimport { Swap } from './Components/Swap'\nimport { Liquidity } from './Components/Liquidity'\n\nexport const Bridge: React.FC = () => {\n  const [section, setSection] = useState('swap')\n  const { i18n } = useTranslation()\n\n  const Section = useMemo(() => () => section === 'swap' ? <Swap /> : <Liquidity />, [section])\n\n  return (\n    <BridgeWrapper>\n      <SwitchWrapper>\n        <Switch\n          choices={[\n            { value: 'swap', label: 'Swap' },\n            { value: 'liquidity', label: 'Liquidity' }\n          ]}\n          onChange={setSection}\n          selected={section}\n        />\n      </SwitchWrapper>\n      <Section />\n    </BridgeWrapper>\n  )\n}\n","import { Blockchains } from '@unifiprotocol/core-sdk'\nimport { Currency } from '@unifiprotocol/utils'\nimport { TConfig } from '../Config'\n\nconst BASE_ENDPOINT = 'https://proxy.unifiprotocol.com/bridge'\n\ntype APIResponse<T> = {\n  status: 'ERROR' | 'OK'\n  result: T\n}\n\nexport type BridgeConfigResponse = TConfig\n\nexport async function fetchConfig(): Promise<APIResponse<BridgeConfigResponse>> {\n  const response: APIResponse<BridgeConfigResponse> = await fetch(\n    `${BASE_ENDPOINT}/v1/blockchains`\n  ).then((res) => res.json())\n  Object.keys(response.result).forEach((b) => {\n    const blockchain = b as Blockchains\n    const blockchainConfig = response.result[blockchain]!\n    Object.keys(blockchainConfig.tokens).forEach((token) => {\n      const currToken = blockchainConfig.tokens[token]\n      blockchainConfig.tokens[token] = new Currency(\n        currToken.address,\n        currToken.decimals,\n        currToken.symbol,\n        currToken.name\n      )\n    })\n  })\n  return { ...response }\n}\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { RefreshBalances } from '@unifiprotocol/shell'\nimport { useConfig } from '.'\nimport { useAdapter } from '../Adapter'\nimport { fetchConfig } from '../Services/API'\n\nexport const Config = () => {\n  const [init, setInit] = useState(false)\n  const { config, setConfig } = useConfig()\n  const { adapter, eventBus, addToken } = useAdapter()\n\n  const initializeTokens = useCallback(() => {\n    if (adapter?.isConnected()) {\n      const blockchain = adapter.blockchainConfig.blockchain\n      const cfg = config[blockchain]\n      if (cfg) {\n        Object.values(cfg.tokens).forEach((currency) => {\n          addToken(currency)\n        })\n        setTimeout(() => eventBus?.emit(new RefreshBalances()))\n      }\n    }\n  }, [adapter, config, eventBus, addToken])\n\n  useEffect(() => {\n    if (adapter?.isConnected() && Object.keys(config).length > 0 && !init) {\n      initializeTokens()\n      setInit(true)\n    }\n  }, [adapter, config, init, initializeTokens])\n\n  useEffect(() => {\n    fetchConfig().then((cfg) => {\n      setConfig(cfg.result)\n    })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return <></>\n}\n","import EventEmitter from 'eventemitter3'\n\ntype ClockEvents = 'SIXTY_SECONDS' | 'THIRTY_SECONDS' | 'TEN_SECONDS' | 'TWO_MINUTES'\n\nconst TWO_MINUTES_MS = 2 * 60 * 1000\nconst SIXTY_SECONDS_MS = 60 * 1000\nconst THIRTY_SECONDS_MS = 30 * 1000\nconst TEN_SECONDS_MS = 10 * 1000\n\nclass Clock extends EventEmitter<ClockEvents> {\n  private clockTenSeconds?: NodeJS.Timer\n  private clockThirtySeconds?: NodeJS.Timer\n  private clockSixtySeconds?: NodeJS.Timer\n  private clockTwoMinutes?: NodeJS.Timer\n\n  start() {\n    console.debug('[Clocks] Start')\n    // First pulse\n    this.emit('TEN_SECONDS', {})\n    this.emit('THIRTY_SECONDS', {})\n    this.emit('SIXTY_SECONDS', {})\n    this.emit('TWO_MINUTES', {})\n\n    this.clockTwoMinutes = setInterval(() => {\n      this.emit('TWO_MINUTES', {})\n    }, TWO_MINUTES_MS)\n    this.clockSixtySeconds = setInterval(() => {\n      this.emit('SIXTY_SECONDS', {})\n    }, SIXTY_SECONDS_MS)\n    this.clockThirtySeconds = setInterval(() => {\n      this.emit('THIRTY_SECONDS', {})\n    }, THIRTY_SECONDS_MS)\n    this.clockTenSeconds = setInterval(() => {\n      this.emit('TEN_SECONDS', {})\n    }, TEN_SECONDS_MS)\n  }\n\n  clear() {\n    this.clockTwoMinutes && clearInterval(this.clockTwoMinutes)\n    this.clockSixtySeconds && clearInterval(this.clockSixtySeconds)\n    this.clockThirtySeconds && clearInterval(this.clockThirtySeconds)\n    this.clockTenSeconds && clearInterval(this.clockTenSeconds)\n  }\n}\n\nexport default new Clock()\n","import React, { useEffect, useState } from 'react'\nimport { useLiquidity } from '.'\nimport { useConfig } from '../Config'\nimport Clocks from '../Services/Clocks'\n\nexport const Liquidty = () => {\n  const [init, setInit] = useState(false)\n  const { updateLiquidity } = useLiquidity()\n  const { config } = useConfig()\n\n  useEffect(() => {\n    if (Object.keys(config).length > 0 && !init) {\n      updateLiquidity()\n      setInit(true)\n    }\n  }, [config, init, updateLiquidity])\n\n  useEffect(() => {\n    const fn = () => updateLiquidity()\n    Clocks.on('SIXTY_SECONDS', fn)\n    return () => {\n      Clocks.off('SIXTY_SECONDS', fn)\n    }\n  }, [updateLiquidity])\n\n  return <></>\n}\n","import { UnifiThemeProvider, Themes } from '@unifiprotocol/uikit'\nimport { Blockchains, TokenLogoResolvers } from '@unifiprotocol/utils'\nimport { ShellWrappedComp } from '@unifiprotocol/shell'\nimport { Body } from './Template/Body'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { Bridge } from './View'\nimport { I18nextProvider } from 'react-i18next'\nimport { useEffect, useMemo } from 'react'\nimport { AdapterContext } from './Adapter'\nimport { Config } from './Config/Component'\nimport { Liquidty } from './Liquidity/Component'\nimport Clocks from './Services/Clocks'\n\nconst App: ShellWrappedComp = ({ i18n, connection, balances, eventBus }) => {\n  const blockchain = useMemo(\n    () => connection.adapter?.adapter.blockchainConfig.blockchain ?? Blockchains.Binance,\n    [connection]\n  )\n\n  useEffect(() => {\n    Clocks.start()\n  }, [])\n\n  return (\n    <AdapterContext.Provider value={{ connection, balances, eventBus }}>\n      <I18nextProvider i18n={i18n}>\n        <UnifiThemeProvider\n          theme={Themes.Dark}\n          options={{\n            tokenLogoResolver: TokenLogoResolvers[blockchain]\n          }}\n        >\n          <Config />\n          <Liquidty />\n          <Router>\n            <Body>\n              <Switch>\n                <Route path=\"/\">\n                  <Bridge />\n                </Route>\n              </Switch>\n            </Body>\n          </Router>\n        </UnifiThemeProvider>\n      </I18nextProvider>\n    </AdapterContext.Provider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Shell } from '@unifiprotocol/shell'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { RecoilRoot } from 'recoil'\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <Shell Wrapped={App} />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}